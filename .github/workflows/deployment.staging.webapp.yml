# name: remote-config-deployer

# on: [push]

# jobs:
#   build:
#     runs-on: ubuntu-latest
#     steps:
#       - uses: actions/checkout@v2
#       - name: Set up Python
#         uses: actions/setup-python@v2
#         with:
#           python-version: "3.8"
#       - name: Cache pip
#         uses: actions/cache@v2
#         with:
#           path: ~/.cache/pip
#           key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
#           restore-keys: |
#             ${{ runner.os }}-pip-
#             ${{ runner.os }}-
#       - name: Install dependencies
#         run: |
#           python -m pip install --upgrade pip
#           if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
#   deploy:
#     runs-on: ubuntu-latest
#     needs: build
#     if: success() && github.ref == 'refs/heads/main'
#     steps:
#       - uses: actions/checkout@v2
#       - name: Set up Python
#         uses: actions/setup-python@v2
#         with:
#           python-version: "3.8"
#       - name: Install dependencies
#         run: |
#           python -m pip install --upgrade pip
#           if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
#       - name: Publish
#         env:
#           PROJECT_ID: "medica-test-customer"
#           CREDENTIALS: "keke.json"
#         run: |
#           python config_manager.py --action=publish

name: Call API

on:
  push:
    branches:
      - main

jobs:
  call-api:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Make HTTP GET request
        run: |
          API_URL="https://api.example.com/data"
          RESPONSE=$(curl -s "$API_URL")
          echo "API Response: $RESPONSE"
